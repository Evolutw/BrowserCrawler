// == 浏览器控制台智能爬虫（完整版）==
(async function() {

    let pageChange = true

    // ========== 配置区 ==========
    const CONFIG = {
        DELAY: 2500,            // 翻页等待时间(毫秒)
        MAX_RETRY: 5,           // 最大重试次数
        PAGE_SIZE: 500,         // 每页显示数量
        CSV_PREFIX: '用户数据',  // 导出文件名前缀
        REQUIRED_FIELDS: ["姓名", "证件号"], // 必填字段校验
        FIELD_MAPPINGS: {       // 表头映射配置（支持多个匹配名称）
            "产品": ["产品"],
            "姓名": ["姓名", "客户名称"],
            "证件号": ["CPE"],
        },
    };

    // ========== 工具函数 ==========
    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            const check = () => {
                const element = document.querySelector(selector);
                if (element) {
                    resolve(element);
                } else if (Date.now() - start > timeout) {
                    reject(new Error(`元素加载超时: ${selector}`));
                } else {
                    setTimeout(check, 100);
                }
            };
            check();
        });
    }

    function waitForElementChange(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            const initialElement = document.querySelector(selector);
            const initialContent = initialElement?.innerText || '';
            
            const check = () => {
                const currentElement = document.querySelector(selector);
                const currentContent = currentElement?.innerText || '';
                
                if (!currentElement || currentContent !== initialContent) {
                    pageChange = true;
                    resolve();
                } else if (Date.now() - start > timeout) {
                    pageChange = false;
                    reject(new Error(`元素内容未变化: ${selector}`));
                } else {
                    setTimeout(check, 100);
                }
            };
            check();
        });
    }

    // ========== 核心函数 ==========
    function createHeaderMapper() {
        const headerCells = Array.from(document.querySelectorAll('thead th, .el-table__header th'));
        const headers = headerCells.map(th => th.innerText.trim().replace(/\s+/g, ''));
        
        const mapper = {};
        let missingFields = [];

        Object.entries(CONFIG.FIELD_MAPPINGS).forEach(([fieldName, aliases]) => {
            const foundIndex = headers.findIndex(header => 
                aliases.some(alias => header.includes(alias))
            );

            if (foundIndex >= 0) {
                const cell = headerCells[foundIndex];
                const colIndex = Array.from(cell.parentNode.children).indexOf(cell) + 1;
                
                mapper[fieldName] = {
                    selector: `td:nth-child(${colIndex}), .el-table__row td:nth-child(${colIndex})`,
                    index: foundIndex,
                    headerText: headers[foundIndex]
                };
            } else {
                missingFields.push(fieldName);
                console.warn(`未找到表头匹配: ${fieldName} (尝试匹配: ${aliases.join(', ')})`);
            }
        });

        // 检查必填字段
        const missingRequired = CONFIG.REQUIRED_FIELDS.filter(f => !mapper[f]);
        if (missingRequired.length > 0) {
            throw new Error(`缺少必要字段: ${missingRequired.join(', ')}`);
        }

        console.log('表头映射结果:', JSON.stringify(mapper, null, 2));
        return mapper;
    }

    function extractData(mapper) {
    const rows = document.querySelectorAll('tbody tr:not(.el-table__row--placeholder)');
    return Array.from(rows).map(row => {
        const data = {};
        
        Object.entries(mapper).forEach(([fieldName, {selector}]) => {
            const cell = row.querySelector(selector);
            let value = cell?.innerText?.trim() || '';
            
            // 字段特定处理
            if (fieldName === "证件号") {
                value = value.replace(/,/g, '');
            } else if (fieldName.includes("金额") || fieldName.includes("本金")) {
                value = value.replace(/[^0-9.]/g, '');
            }
            
            data[fieldName] = value;
        });

        return data;
    });
    }

    async function gotoNextPage() {
        const nextButtons = [
            '.btn-next:not(.is-disabled):not([disabled])',
            '.el-pagination .next:not(.disabled)',
            '.ant-pagination-next:not(.ant-pagination-disabled)'
        ].join(',');

        const nextBtn = document.querySelector(nextButtons);
        if (nextBtn) {
            nextBtn.click();
            await waitForElementChange('tbody tr', 10000);
            return true;
        }
        return false;
    }

    function calculateTotalPages() {
        const totalText = document.querySelector('.el-pagination__total')?.innerText || 
                         document.querySelector('.pagination-total')?.innerText ||
                         '0';
        const totalMatch = totalText.match(/[\d,]+/);
        const total = totalMatch ? parseInt(totalMatch[0].replace(/,/g, '')) : 0;
        return Math.ceil(total / CONFIG.PAGE_SIZE);
    }

    function exportCSV(data) {
        if (data.length === 0) {
            console.warn('没有数据可导出');
            return;
        }

        const headers = Object.keys(CONFIG.FIELD_MAPPINGS);
        const csvContent = [
            '\uFEFF' + headers.join(','), // 添加BOM头解决中文乱码
            ...data.map(item => 
                headers.map(field => {
                    const value = item[field] || '';
                    // 处理包含逗号或换行符的值
                    return /[,"\n]/.test(value) ? `"${value.replace(/"/g, '""')}"` : value;
                }).join(',')
            )
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${CONFIG.CSV_PREFIX}_${new Date().toISOString().slice(0,10)}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }

    // ========== 执行主流程 ==========
    console.log('=== 智能爬虫启动 ===');
    const startTime = Date.now();
    
    try {
        // 初始化等待
        await waitForElement('thead th, .el-table__header th', 15000);
        const headerMapper = createHeaderMapper();
        
        let allData = [];
        let currentPage = 1;
        const totalPages = calculateTotalPages();
        console.log(`总页数: ${totalPages}, 每页: ${CONFIG.PAGE_SIZE}条`);

        // 分页爬取
        while (currentPage <= totalPages) {
            let retry = 0;
            let success = false;
            
            while (retry < CONFIG.MAX_RETRY) {
                try {
                    console.log(`[第${currentPage}页] 尝试${retry+1}/${CONFIG.MAX_RETRY}`);
                    
                    // 等待数据加载
                    await waitForElement('tbody tr', 10000);
                    
                    if (pageChange) {
                        // 提取数据
                        const pageData = extractData(headerMapper);
                        if (pageData.length === 0 && currentPage <= totalPages) {
                            throw new Error('空数据页');
                        }
                    
                        // 合并数据
                        allData = [...allData, ...pageData];
                        console.log(`[成功] 第${currentPage}页 获取${pageData.length}条 累计${allData.length}条`);
                    }
                    // 终止条件
                    if (currentPage >= totalPages || retry+1 === CONFIG.MAX_RETRY) break;
                    console.log(`进行翻页`)
                    // 翻页
                    success = await gotoNextPage();
                    if (!success) break;
                    
                    // 延迟防止检测
                    await new Promise(r => setTimeout(r, CONFIG.DELAY + Math.random() * 1000));
                    currentPage++;
                    break;
                    
                } catch (e) {
                    console.warn(`[错误] ${e.message}`);
                    if (++retry >= CONFIG.MAX_RETRY) throw e;
                    await new Promise(r => setTimeout(r, 2000));
                }
            }
            
            if (!success || retry === CONFIG.MAX_RETRY) break;
            
        }
        console.log('进行结果处理');
        // 结果处理
        if (allData.length > 0) {
            console.log('=== 正在生成CSV文件 ===');
            exportCSV(allData);
            console.log(`=== 完成! 总耗时: ${((Date.now()-startTime)/1000).toFixed(1)}秒 ===`);
        } else {
            console.warn('=== 未获取到有效数据 ===');
        }
        
    } catch (e) {
        console.error(`[致命错误] ${e.message}`);
        console.error(e.stack);
    }
})();
